package com.gofind.gofind.domain;

import static com.gofind.gofind.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

import com.gofind.gofind.domain.itinaries.Trajet;

public class TrajetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAllPropertiesEquals(Trajet expected, Trajet actual) {
        assertTrajetAutoGeneratedPropertiesEquals(expected, actual);
        assertTrajetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAllUpdatablePropertiesEquals(Trajet expected, Trajet actual) {
        assertTrajetUpdatableFieldsEquals(expected, actual);
        assertTrajetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAutoGeneratedPropertiesEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetUpdatableFieldsEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet relevant properties")
            .satisfies(e -> assertThat(e.getDepart()).as("check depart").isEqualTo(actual.getDepart()))
            .satisfies(e -> assertThat(e.getArrivee()).as("check arrivee").isEqualTo(actual.getArrivee()))
            .satisfies(
                e ->
                    assertThat(e.getDateHeureDepart())
                        .as("check dateHeureDepart")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getDateHeureDepart())
            )
            .satisfies(e -> assertThat(e.getPlaces()).as("check places").isEqualTo(actual.getPlaces()))
            .satisfies(e -> assertThat(e.getPrix()).as("check prix").isEqualTo(actual.getPrix()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetUpdatableRelationshipsEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet relationships")
            .satisfies(e -> assertThat(e.getProprietaire()).as("check proprietaire").isEqualTo(actual.getProprietaire()))
            .satisfies(e -> assertThat(e.getEngages()).as("check engages").isEqualTo(actual.getEngages()));
    }
}
